import math
from math import cos, sin, asin, sqrt

import telebot
from requests.exceptions import MissingSchema
from telebot import types

from PIL import Image
import requests

import send_message
from DBManager import DataBaseManager
from config import *

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–æ—Ç—É –ø–æ —Ç–æ–∫–µ–Ω—É
bot = telebot.TeleBot(BOT_TOKEN, parse_mode = "MARKDOWN")  # –ù–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å parse_mode="MarkdownV2" !!!

# –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
db = DataBaseManager(db_host, db_name, db_user, db_pass)


def send_info(name, description, address, distance):
    """
    –®–∞–±–ª–æ–Ω –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –º–µ—Å—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    :param name: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    :param description: –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞
    :param address: –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞
    :param distance: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –º–µ—Å—Ç–∞
    :return:
    """

    return "*" + name + "*" + \
           "\n\n" + description + \
           "\n\n" + "üìç" + address + \
           "\n\n" + "üìè" + " –≤ " + str(distance) + " –∫–º –æ—Ç –≤–∞—Å"


# –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫ –º–µ—Å—Ç –¥–ª—è –∞–¥–º–∏–Ω–∫–∏
place = [None] * 6


def process_name_step(message, context):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –∞–¥–º–∏–Ω–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞

    :param context: –∞—Ä–≥—É–º–µ–Ω—Ç—ã call-back —Ñ—É–Ω–∫—Ü–∏–∏
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    try:
        if message.text.lower() == "–Ω–µ—Ç":
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
        else:
            raise AttributeError
    except AttributeError:
        place[0] = message.text
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞")
        bot.register_next_step_handler(msg, process_address_step, context)


def process_description_step(message, context):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –∞–¥–º–∏–Ω–∞ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π

    :param context: –∞—Ä–≥—É–º–µ–Ω—Ç—ã call-back —Ñ—É–Ω–∫—Ü–∏–∏
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    try:
        if message.text.lower() == "–Ω–µ—Ç":
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
        else:
            raise AttributeError
    except AttributeError:

        to_edit = context[0]
        if to_edit:
            text = "–¢–æ—á–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ?"
        else:
            text = "–î–æ–±–∞–≤–∏—Ç—å –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö?"

        place[3] = message.text
        msg = bot.reply_to(message, text)
        bot.register_next_step_handler(msg, work_with_db_step, context)


def process_address_step(message, context):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –∞–¥–º–∏–Ω–∞ –∞–¥—Ä–µ—Å –º–µ—Å—Ç–∞ –∏ –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞

    :param context: –∞—Ä–≥—É–º–µ–Ω—Ç—ã call-back —Ñ—É–Ω–∫—Ü–∏–∏
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    try:
        if message.text.lower() == "–Ω–µ—Ç":
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
        else:
            raise AttributeError
    except AttributeError:
        place[4] = message.text
        msg = bot.reply_to(message, "–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞")
        bot.register_next_step_handler(msg, process_description_step, context)


def process_location_step(message, context):
    """
    –ü–æ–ª—É—á–∞–µ–º –æ—Ç –∞–¥–º–∏–Ω–∞ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –º–µ—Å—Ç–∞

    :param context: –∞—Ä–≥—É–º–µ–Ω—Ç—ã call-back —Ñ—É–Ω–∫—Ü–∏–∏
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    try:
        if message.text.lower() == "–Ω–µ—Ç":
            bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
            return
        else:
            raise AttributeError
    except AttributeError:

        try:
            text = "–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –º–µ—Å—Ç–∞"
            place[1] = message.venue.location.latitude
            place[2] = message.venue.location.longitude
            place[4] = message.venue.address
            place[0] = message.venue.title
            msg = bot.reply_to(message, text)

            bot.register_next_step_handler(msg, process_description_step, context)
        except AttributeError:
            try:
                place[1] = message.location.latitude
                place[2] = message.location.longitude

                msg = bot.reply_to(message, "–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞")
                bot.register_next_step_handler(msg, process_name_step, context)
            except AttributeError:
                msg = bot.reply_to(message, "–û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –º–µ—Å—Ç–∞ —Ç–æ–ª—å–∫–æ —É–∂–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                try:
                    if message.text.lower() == "–Ω–µ—Ç":
                        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
                        return
                except AttributeError:
                    pass
                bot.register_next_step_handler(msg, process_location_step, context)


def work_with_db_step(message, context):
    """
    –†–∞–±–æ—Ç–∞–µ–º —Å –º–µ—Å—Ç–æ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —á–µ—Ä–µ–∑ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –∞–¥–º–∏–Ω–∞

    :param context: –∞—Ä–≥—É–º–µ–Ω—Ç—ã call-back —Ñ—É–Ω–∫—Ü–∏–∏
    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    name = place[0]
    lat = place[1]
    lng = place[2]
    description = place[3]
    address = place[4]

    to_edit = context[0]

    if not to_edit:
        try:
            if message.text.lower() == "–¥–∞":
                db.insert_place_to_db(name, lat, lng, description, address)
                bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ")
            elif message.text.lower() == "–Ω–µ—Ç":
                bot.send_message(message.chat.id, "–ù–µ—Ç, —Ç–∞–∫ –Ω–µ—Ç")
                return
            else:
                raise AttributeError
        except AttributeError:
            msg = bot.reply_to(message, "–ì–ª—É–ø—ã–π —á—Ç–æ –ª–∏? –û—Ç–≤–µ—Ç—å: –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
            bot.register_next_step_handler(msg, work_with_db_step, context)
    else:
        try:
            if message.text.lower() == "–¥–∞":
                db.edit_place_from_db(name, lat, lng, description, address, context[1])
                bot.send_message(message.chat.id, "–ú–µ—Å—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–æ")
            elif message.text.lower() == "–Ω–µ—Ç":
                bot.send_message(message.chat.id, "–ù–µ—Ç, —Ç–∞–∫ –Ω–µ—Ç")
                return
            else:
                raise AttributeError
        except AttributeError:
            msg = bot.reply_to(message, "–ì–ª—É–ø—ã–π —á—Ç–æ –ª–∏? –û—Ç–≤–µ—Ç—å: –¥–∞ –∏–ª–∏ –Ω–µ—Ç")
            bot.register_next_step_handler(msg, work_with_db_step, context)


def delete_place_step(message, context):
    """
    –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç —É–¥–∞–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    :param context: context[0] -- –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞
    :return:
    """
    try:
        if message.text.lower() == "–Ω–µ—Ç":
            bot.send_message(message.chat.id, "–£–¥–∞–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ")
            return
        elif message.text.lower() == "–¥–∞":
            db.delete_place_from_db(context[0])
            bot.send_message(message.chat.id, text = "–ú–µ—Å—Ç–æ –±—ã–ª–æ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–æ")
        else:
            raise AttributeError
    except AttributeError:
        msg = bot.reply_to(message, text = "–¢–∞–∫ –¥–∞ –∏–ª–∏ –Ω–µ—Ç?")
        bot.register_next_step_handler(msg, delete_place_step, context)


@bot.message_handler(commands = ["send"])
def send_message_to_all(message):
    """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º

        :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
        """

    if message.from_user.username in admins:
        msg = bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, " + message.from_user.username +
                           "! –ù–∞–ø–∏—à–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å!")

        bot.register_next_step_handler(msg, send_msg)
    else:
        return


def send_msg(message):
    if message.text.lower() == "–Ω–µ—Ç":
        bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
        return
    send_message.send_message_to_users(message.text)


@bot.message_handler(commands = ["add"])
def add_place(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–∞—è –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∞–º

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    if message.from_user.username in admins:
        to_edit = False
        context = [to_edit]
        msg = bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç, " + message.from_user.username +
                           "! –û—Ç–ø—Ä–∞–≤—å –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é –º–µ—Å—Ç–∞, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å")

        bot.register_next_step_handler(msg, process_location_step, context)
    else:
        return


@bot.message_handler(commands = ["start"])
def send_location(message):
    """
    –°—Ç–∞—Ä—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≥–µ–æ–ø–æ–∑–∏—Ü–∏–∏
    keyboard = types.ReplyKeyboardMarkup()
    keyboard.resize_keyboard = True
    send_location_btn = types.KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–≤–æ–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ", request_location = True)
    keyboard.add(send_location_btn)

    # –ú–æ–¥–∏—Ñ–∏—Ü–∏—Ä—É–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -- –∞–¥–º–∏–Ω
    if message.from_user.username in admins:
        add_location_btn = types.KeyboardButton("/add –î–æ–±–∞–≤–∏—Ç—å –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ")
        send_message_btn = types.KeyboardButton("/send –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ")
        keyboard.add(add_location_btn, send_message_btn)
        bot.send_message(message.chat.id, "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π, —Å—Ç–∞–ª–∫–µ—Ä", reply_markup = keyboard)
    else:
        bot.send_message(message.chat.id, "–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Å–≤–æ—é –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é", reply_markup = keyboard)


@bot.message_handler(content_types = ['location'])
def handle_loc(message):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –≥–µ–æ–ø–æ–∑–∏—Ü–∏—é, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—É—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º

    :param message: —Å–æ–æ–±—â–µ–Ω–∏–µ
    """

    db.insert_user_to_db(message)

    usr_lat = message.location.latitude
    usr_lng = message.location.longitude

    # –°–æ–∑–¥–∞–µ–º —Å–ø–∏—Å–æ–∫, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç —Å–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    list_of_places: list = []

    # –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –Ω–∞ —Ç–æ, –Ω–∞—à–µ–ª –ª–∏ –±–æ—Ç –º–µ—Å—Ç–æ –≤ —Ä–∞–¥–∏—É—Å–µ
    place_found: bool = False

    # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ —Ç–∞–±–ª–∏—Ü–µ –∏ –≤—ã—Ç—è–≥–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –º–µ—Å—Ç–µ
    for row in db.get_place_from_db():
        plc_name: str = row[0]
        plc_lat: float = row[1]
        plc_lng: float = row[2]
        plc_desc: str = row[3]
        plc_addr: str = row[4]
        plc_img_url: str = row[5]
        plc_id = str(row[6])

        # –°—á–∏—Ç–∞–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –º–µ—Å—Ç–∞ –∏–∑ —Ç–∞–±–ª–∏—Ü—ã
        usr_to_plc = count_distance(usr_lat, usr_lng, plc_lat, plc_lng)

        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫-–∫–æ—Ä—Ç–µ–∂ (??) —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–º —ç–ª–µ–º–µ–Ω—Ç–æ–º 'usr_to_plc' (—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –¥–æ –æ–±—ä–µ–∫—Ç–∞)
        # —Å–æ—Ä—Ç–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ –ø–æ —ç—Ç–æ–º—É –∑–Ω–∞—á–µ–Ω–∏—é
        plc: tuple = (plc_name, plc_lat, plc_lng, plc_desc, plc_addr, usr_to_plc, plc_img_url, plc_id)
        list_of_places.append(plc)
        list_of_places = sorted(list_of_places, key = lambda x: x[5])

    # –û—Å—Ç–∞–≤–ª—è–µ–º 4 –±–ª–∏–∂–∞–π—à–∏—Ö –º–µ—Å—Ç–∞
    list_of_places = list_of_places[:4]

    for plc in list_of_places:
        # –û–±–ª–∞—Å—Ç—å, –≤ —Ä–∞–¥–∏—É—Å–µ (–≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö) –∫–æ—Ç–æ—Ä–æ–π –±—É–¥–µ–º –∏—Å–∫–∞—Ç—å –∑–∞–≤–µ–¥–µ–Ω–∏—è
        radius = 5

        # –î–æ—Å—Ç–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –º–µ—Å—Ç–µ –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        name = str(plc[0])
        description = plc[3]
        address = plc[4]
        distance = plc[5]
        img = plc[6]
        id = plc[7]

        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –º–µ—Å—Ç–æ –≤ —Ä–∞–¥–∏—É—Å–µ
        if distance <= radius:
            place_found = True

            latitude = str(plc[1])
            longitude = str(plc[2])

            # –°–æ–∑–¥–∞–µ–º inline-–∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–¥—Ö–æ–¥—è—â–µ–≥–æ –ø–æ–¥ —É—Å–ª–æ–≤–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            inline_keyboard = types.InlineKeyboardMarkup()
            geo_btn = types.InlineKeyboardButton(text = "üó∫ –ì–¥–µ —ç—Ç–æ?",  # –ü–µ—Ä–µ–¥–∞–µ–º –∫–Ω–æ–ø–∫–µ —Ç–∏–ø –æ–ø–µ—Ä–∞—Ü–∏–∏ –∏ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
                                                 callback_data = "send_location " + latitude + " " + longitude)
            inline_keyboard.add(geo_btn)

            # –î–æ–±–∞–≤–ª—è–µ–º inline-–∫–Ω–æ–ø–∫—É —É–¥–∞–ª–µ–Ω–∏—è –º–µ—Å—Ç–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å -- –∞–¥–º–∏–Ω
            if message.from_user.username in admins:
                delete_btn = types.InlineKeyboardButton(text = "‚ùå –£–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ",
                                                        callback_data = "delete_location " + id)

                edit_btn = types.InlineKeyboardButton(text = "‚úèÔ∏è –ò–∑–º–µ–Ω–∏—Ç—å –º–µ—Å—Ç–æ",
                                                      callback_data = "edit_location " + id)
                inline_keyboard.add(edit_btn)
                inline_keyboard.add(delete_btn)

            try:
                if img == 'no_image':
                    raise FileNotFoundError
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—Ç–µ, —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–µ–π –∏ –∫–Ω–æ–ø–∫–æ–π —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –≤–Ω—É—Ç—Ä–∏
                im = Image.open(requests.get(img, stream=True).raw, mode = 'r')
                bot.send_photo(message.chat.id, photo = im,
                               caption = send_info(name, description, address, distance),
                               reply_markup = inline_keyboard)
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –º–µ—Å—Ç–µ –∏ –∫–Ω–æ–ø–∫–æ–π —Å –≥–µ–æ–ø–æ–∑–∏—Ü–∏–µ–π –≤–Ω—É—Ç—Ä–∏, –µ—Å–ª–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
            except FileNotFoundError or UnboundLocalError or TypeError or MissingSchema:
                bot.send_message(message.chat.id,
                                 text = send_info(name, description, address, distance), reply_markup = inline_keyboard)

    # –ï—Å–ª–∏ –º–µ—Å—Ç –≤ —Ä–∞–¥–∏—É—Å–µ –Ω–µ—Ç, —Ç–æ —É–≤–µ–¥–æ–º–ª—è–µ–º –æ–± —ç—Ç–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not place_found:
        bot.send_message(message.chat.id, "–†—è–¥–æ–º —Å –≤–∞–º–∏ –Ω–µ—Ç –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –º–µ—Å—Ç üòû ")


@bot.callback_query_handler(func = lambda c: True)
def ans(c):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –Ω–∞–∂–∞—Ç–∏—è inline-–∫–Ω–æ–ø–æ–∫
    """

    cid = c.message.chat.id
    keyboard = types.InlineKeyboardMarkup()
    if "send_location" in c.data:
        # –ü–∞—Ä—Å–∏–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –∏–∑ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ª–æ–∫–∞—Ü–∏—é
        lat = c.data.split(" ")[1]
        lng = c.data.split(" ")[2]
        bot.send_location(cid, lat, lng, reply_markup = keyboard)
    elif "delete_location" in c.data:
        # –ü–∞—Ä—Å–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ë–î –∏ —É–¥–∞–ª–∏—Ç—å
        id = c.data.split(" ")[1]
        context = [id]

        if not db.place_found_in_db(id):
            bot.send_message(cid, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å. –ú–µ—Å—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            text = "–¢–æ—á–Ω–æ —É–¥–∞–ª–∏—Ç—å –º–µ—Å—Ç–æ?"
            msg = bot.reply_to(c.message, text)
            bot.register_next_step_handler(msg, delete_place_step, context)

    elif "edit_location" in c.data:
        # –ü–∞—Ä—Å–∏–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –º–µ—Å—Ç–∞, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –µ–≥–æ –≤ –ë–î –∏ –∏–∑–º–µ–Ω–∏—Ç—å
        id = c.data.split(" ")[1]
        to_edit = True
        context = [to_edit, id]

        if not db.place_found_in_db(id):
            bot.send_message(cid, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å. –ú–µ—Å—Ç–∞ –Ω–µ—Ç –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        else:
            msg = bot.reply_to(c.message, "–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—Ç–∞.")
            try:
                if c.message.text.lower() == "–Ω–µ—Ç":
                    bot.send_message(cid, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—Ç–º–µ–Ω–∞ –æ–ø–µ—Ä–∞—Ü–∏–∏")
                    return
            except AttributeError:
                pass

            bot.register_next_step_handler(msg, process_name_step, context)
    else:
        pass


def count_distance(usr_lat, usr_lng, plc_lat, plc_lng):
    """
    –í—ã—á–∏—Å–ª—è–µ–º —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö –º–µ–∂–¥—É –¥–≤—É–º—è —Ç–æ—á–∫–∞–º–∏, —É—á–∏—Ç—ã–≤–∞—è –æ–∫—Ä—É–∂–Ω–æ—Å—Ç—å –ó–µ–º–ª–∏.

    :param usr_lat: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —à–∏—Ä–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param usr_lng: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–æ–ª–≥–æ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    :param plc_lat: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ —à–∏—Ä–æ—Ç—ã –º–µ—Å—Ç–∞
    :param plc_lng: –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–∞ –¥–æ–ª–≥–æ—Ç—ã –º–µ—Å—Ç–∞
    :return: —Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–æ –º–µ—Å—Ç–∞
    """
    dlng = (plc_lng - usr_lng) * math.pi / 180
    dlat = (plc_lat - usr_lat) * math.pi / 180

    usr_lat = usr_lat * math.pi / 180
    plc_lat = plc_lat * math.pi / 180

    a = pow(sin(dlat / 2), 2) + pow(sin(dlng / 2), 2) * cos(usr_lat) * cos(plc_lat)
    rad = 6371
    c = 2 * asin(sqrt(a))

    km = rad * c

    return round(km, 2)


def main():
    bot.polling(non_stop = True)


if __name__ == '__main__':
    main()
